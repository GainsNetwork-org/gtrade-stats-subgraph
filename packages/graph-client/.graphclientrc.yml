sources:
  - name: gtrade-stats
    handler:
      graphql:
        endpoint: https://api.thegraph.com/subgraphs/name/gainsnetwork-org/{context.graphName:gtrade-stats-mumbai}
        retry: 3
    transforms:
      - autoPagination:
          validateSchema: false
          limitOfRecords: 5000

  - name: gtoken
    handler:
      graphql:
        endpoint: https://api.thegraph.com/subgraphs/name/thebuidler/{context.graphName:gtoken-arbitrum}
        retry: 3

additionalTypeDefs: |
  # Types
  type RewardDistributionP {
    loyalty: Float!
    fee: Float!
    absSkill: Float!
    relSkill: Float!
    diversity: Float!
  }

  type RewardConfig {
    id: ID!
    active: Boolean!
    totalRewards: Int!
    epochType: EpochType!
    numEpochs: Int!
    startingEpoch: Int!
    rewardDistribution: RewardDistributionP!
  }

  type RewardResults {
    address: String!
    total: Float!
    loyalty: Float!
    fee: Float!
    absSkill: Float!
    relSkill: Float!
    diversity: Float!
  }

  # Query extensions
  extend type Query {
    getActiveRewardConfigs: [RewardConfig!]!
    getRewardConfig(id: ID!): RewardConfig
    getAddressRewardsForEpoch(address: String!, rewardConfigId: ID!, epoch: Int!): RewardResults!
    getAllRewardsForEpoch(rewardConfigId: ID!, epoch: Int!, skip: Int = 0, first: Int = 1000): [RewardResults!]!
    getAllRewardsForLastEpoch(rewardConfigId: ID!, skip: Int = 0, first: Int = 1000): [RewardResults!]!
  }

additionalResolvers:
  - ./resolvers/index.js

documents:
  - ./queries/*.gql

codegen:
  contextType: "MeshContext & { chainId: string; graphName: string; }"
