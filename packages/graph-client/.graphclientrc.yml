sources:
  - name: gtrade-stats
    handler:
      graphql:
        endpoint: https://api.studio.thegraph.com/query/79776/gtrade-stats-arbitrum-test/v0.0.1-rc2
        retry: 3

    transforms:
      - autoPagination:
          validateSchema: false
          limitOfRecords: 5000

  - name: gtoken
    handler:
      graphql:
        endpoint: https://api.studio.thegraph.com/query/79776/gtoken-arbitrum-mc1/v0.0.1
        retry: 3

additionalTypeDefs: |
  # Types
  type RewardDistributionP {
    loyalty: Float!
    fee: Float!
    absSkill: Float!
    relSkill: Float!
    diversity: Float!
    total: Float
  }

  type EpochRewardDistributionP {
    startEpoch: Int!
    endEpoch: Int!
    rewardDistribution: RewardDistributionP!
  }

  type RewardConfig {
    id: ID!
    active: Boolean!
    totalRewards: Int!
    epochType: EpochType!
    numEpochs: Int!
    startingEpoch: Int!
    rewardDistribution: RewardDistributionP!
    rewardDistributionOverrides: [EpochRewardDistributionP!]!
    rewardsPairIx: Int
    capFeeRewards: Boolean
  }

  type RewardResults {
    address: String!
    total: Float!
    loyalty: Float!
    fee: Float!
    absSkill: Float!
    relSkill: Float!
    diversity: Float!
    loyaltyPoints: Float!
    feePoints: Float!
    absSkillPoints: Float!
    relSkillPoints: Float!
    diversityPoints: Float!
  }

  # Query extensions
  extend type Query {
    getActiveRewardConfigs: [RewardConfig!]!
    getRewardConfig(id: ID!): RewardConfig
    getAddressRewardsForEpoch(address: String!, rewardConfigId: ID!, epoch: Int!, rewardToUsd: Float): RewardResults!
    getAllRewardsForEpoch(rewardConfigId: ID!, epoch: Int!, rewardToUsd: Float): [RewardResults!]!
    getAllRewardsForLastEpoch(rewardConfigId: ID!, rewardToUsd: Float): [RewardResults!]!
  }

additionalResolvers:
  - ./resolvers/index.js

documents:
  - ./queries/*.gql

codegen:
  contextType: "MeshContext & { chainId: string; graphName: string; }"
