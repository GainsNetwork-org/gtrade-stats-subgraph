// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class EpochTradingStatsRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EpochTradingStatsRecord entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EpochTradingStatsRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EpochTradingStatsRecord", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EpochTradingStatsRecord | null {
    return changetype<EpochTradingStatsRecord | null>(
      store.get_in_block("EpochTradingStatsRecord", id)
    );
  }

  static load(id: string): EpochTradingStatsRecord | null {
    return changetype<EpochTradingStatsRecord | null>(
      store.get("EpochTradingStatsRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get epochType(): string {
    let value = this.get("epochType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set epochType(value: string) {
    this.set("epochType", Value.fromString(value));
  }

  get epochNumber(): i32 {
    let value = this.get("epochNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set epochNumber(value: i32) {
    this.set("epochNumber", Value.fromI32(value));
  }

  get collateral(): string {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateral(value: string) {
    this.set("collateral", Value.fromString(value));
  }

  get totalVolumePerGroup(): Array<BigDecimal> {
    let value = this.get("totalVolumePerGroup");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set totalVolumePerGroup(value: Array<BigDecimal>) {
    this.set("totalVolumePerGroup", Value.fromBigDecimalArray(value));
  }

  get totalBorrowingFees(): BigDecimal {
    let value = this.get("totalBorrowingFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalBorrowingFees(value: BigDecimal) {
    this.set("totalBorrowingFees", Value.fromBigDecimal(value));
  }

  get pairsTraded(): Array<i32> {
    let value = this.get("pairsTraded");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toI32Array();
    }
  }

  set pairsTraded(value: Array<i32>) {
    this.set("pairsTraded", Value.fromI32Array(value));
  }

  get totalPnl(): BigDecimal {
    let value = this.get("totalPnl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalPnl(value: BigDecimal) {
    this.set("totalPnl", Value.fromBigDecimal(value));
  }

  get totalPnlPercentage(): BigDecimal {
    let value = this.get("totalPnlPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalPnlPercentage(value: BigDecimal) {
    this.set("totalPnlPercentage", Value.fromBigDecimal(value));
  }

  get totalGovFees(): BigDecimal {
    let value = this.get("totalGovFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalGovFees(value: BigDecimal) {
    this.set("totalGovFees", Value.fromBigDecimal(value));
  }

  get totalReferralFees(): BigDecimal {
    let value = this.get("totalReferralFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalReferralFees(value: BigDecimal) {
    this.set("totalReferralFees", Value.fromBigDecimal(value));
  }

  get totalTriggerFees(): BigDecimal {
    let value = this.get("totalTriggerFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalTriggerFees(value: BigDecimal) {
    this.set("totalTriggerFees", Value.fromBigDecimal(value));
  }

  get totalStakerFees(): BigDecimal {
    let value = this.get("totalStakerFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalStakerFees(value: BigDecimal) {
    this.set("totalStakerFees", Value.fromBigDecimal(value));
  }

  get totalLpFees(): BigDecimal {
    let value = this.get("totalLpFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalLpFees(value: BigDecimal) {
    this.set("totalLpFees", Value.fromBigDecimal(value));
  }
}

export class EpochTradingPointsRecord extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EpochTradingPointsRecord entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EpochTradingPointsRecord must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("EpochTradingPointsRecord", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EpochTradingPointsRecord | null {
    return changetype<EpochTradingPointsRecord | null>(
      store.get_in_block("EpochTradingPointsRecord", id)
    );
  }

  static load(id: string): EpochTradingPointsRecord | null {
    return changetype<EpochTradingPointsRecord | null>(
      store.get("EpochTradingPointsRecord", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get epochNumber(): i32 {
    let value = this.get("epochNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set epochNumber(value: i32) {
    this.set("epochNumber", Value.fromI32(value));
  }

  get epochType(): string {
    let value = this.get("epochType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set epochType(value: string) {
    this.set("epochType", Value.fromString(value));
  }

  get collateral(): string {
    let value = this.get("collateral");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collateral(value: string) {
    this.set("collateral", Value.fromString(value));
  }

  get totalFeesPaid(): BigDecimal {
    let value = this.get("totalFeesPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalFeesPaid(value: BigDecimal) {
    this.set("totalFeesPaid", Value.fromBigDecimal(value));
  }

  get pnl(): BigDecimal {
    let value = this.get("pnl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set pnl(value: BigDecimal) {
    this.set("pnl", Value.fromBigDecimal(value));
  }

  get pnlPercentage(): BigDecimal {
    let value = this.get("pnlPercentage");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set pnlPercentage(value: BigDecimal) {
    this.set("pnlPercentage", Value.fromBigDecimal(value));
  }

  get groupsTraded(): Array<BigDecimal> {
    let value = this.get("groupsTraded");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimalArray();
    }
  }

  set groupsTraded(value: Array<BigDecimal>) {
    this.set("groupsTraded", Value.fromBigDecimalArray(value));
  }

  get loyaltyPoints(): BigDecimal {
    let value = this.get("loyaltyPoints");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set loyaltyPoints(value: BigDecimal) {
    this.set("loyaltyPoints", Value.fromBigDecimal(value));
  }

  get feePoints(): BigDecimal {
    let value = this.get("feePoints");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set feePoints(value: BigDecimal) {
    this.set("feePoints", Value.fromBigDecimal(value));
  }

  get absSkillPoints(): BigDecimal {
    let value = this.get("absSkillPoints");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set absSkillPoints(value: BigDecimal) {
    this.set("absSkillPoints", Value.fromBigDecimal(value));
  }

  get relSkillPoints(): BigDecimal {
    let value = this.get("relSkillPoints");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set relSkillPoints(value: BigDecimal) {
    this.set("relSkillPoints", Value.fromBigDecimal(value));
  }

  get diversityPoints(): BigDecimal {
    let value = this.get("diversityPoints");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set diversityPoints(value: BigDecimal) {
    this.set("diversityPoints", Value.fromBigDecimal(value));
  }
}
