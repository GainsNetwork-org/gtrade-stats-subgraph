// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BorrowingFeeCharged extends ethereum.Event {
  get params(): BorrowingFeeCharged__Params {
    return new BorrowingFeeCharged__Params(this);
  }
}

export class BorrowingFeeCharged__Params {
  _event: BorrowingFeeCharged;

  constructor(event: BorrowingFeeCharged) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tradeValueDai(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get feeValueDai(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClosingFeeSharesPUpdated extends ethereum.Event {
  get params(): ClosingFeeSharesPUpdated__Params {
    return new ClosingFeeSharesPUpdated__Params(this);
  }
}

export class ClosingFeeSharesPUpdated__Params {
  _event: ClosingFeeSharesPUpdated;

  constructor(event: ClosingFeeSharesPUpdated) {
    this._event = event;
  }

  get daiVaultFeeP(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lpFeeP(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sssFeeP(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DaiVaultFeeCharged extends ethereum.Event {
  get params(): DaiVaultFeeCharged__Params {
    return new DaiVaultFeeCharged__Params(this);
  }
}

export class DaiVaultFeeCharged__Params {
  _event: DaiVaultFeeCharged;

  constructor(event: DaiVaultFeeCharged) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get valueDai(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Done extends ethereum.Event {
  get params(): Done__Params {
    return new Done__Params(this);
  }
}

export class Done__Params {
  _event: Done;

  constructor(event: Done) {
    this._event = event;
  }

  get done(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class GovFeeCharged extends ethereum.Event {
  get params(): GovFeeCharged__Params {
    return new GovFeeCharged__Params(this);
  }
}

export class GovFeeCharged__Params {
  _event: GovFeeCharged;

  constructor(event: GovFeeCharged) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get valueDai(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get distributed(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class GovFeesClaimed extends ethereum.Event {
  get params(): GovFeesClaimed__Params {
    return new GovFeesClaimed__Params(this);
  }
}

export class GovFeesClaimed__Params {
  _event: GovFeesClaimed;

  constructor(event: GovFeesClaimed) {
    this._event = event;
  }

  get valueDai(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class LimitExecuted extends ethereum.Event {
  get params(): LimitExecuted__Params {
    return new LimitExecuted__Params(this);
  }
}

export class LimitExecuted__Params {
  _event: LimitExecuted;

  constructor(event: LimitExecuted) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get limitIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get t(): LimitExecutedTStruct {
    return changetype<LimitExecutedTStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }

  get nftHolder(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get orderType(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get priceImpactP(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get positionSizeDai(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get percentProfit(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get daiSentToTrader(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get exactExecution(): boolean {
    return this._event.parameters[10].value.toBoolean();
  }
}

export class LimitExecutedTStruct extends ethereum.Tuple {
  get trader(): Address {
    return this[0].toAddress();
  }

  get pairIndex(): BigInt {
    return this[1].toBigInt();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get initialPosToken(): BigInt {
    return this[3].toBigInt();
  }

  get positionSizeDai(): BigInt {
    return this[4].toBigInt();
  }

  get openPrice(): BigInt {
    return this[5].toBigInt();
  }

  get buy(): boolean {
    return this[6].toBoolean();
  }

  get leverage(): BigInt {
    return this[7].toBigInt();
  }

  get tp(): BigInt {
    return this[8].toBigInt();
  }

  get sl(): BigInt {
    return this[9].toBigInt();
  }
}

export class MarketCloseCanceled extends ethereum.Event {
  get params(): MarketCloseCanceled__Params {
    return new MarketCloseCanceled__Params(this);
  }
}

export class MarketCloseCanceled__Params {
  _event: MarketCloseCanceled;

  constructor(event: MarketCloseCanceled) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get trader(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pairIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get index(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get cancelReason(): i32 {
    return this._event.parameters[4].value.toI32();
  }
}

export class MarketExecuted extends ethereum.Event {
  get params(): MarketExecuted__Params {
    return new MarketExecuted__Params(this);
  }
}

export class MarketExecuted__Params {
  _event: MarketExecuted;

  constructor(event: MarketExecuted) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get t(): MarketExecutedTStruct {
    return changetype<MarketExecutedTStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }

  get open(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get priceImpactP(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get positionSizeDai(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get percentProfit(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get daiSentToTrader(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class MarketExecutedTStruct extends ethereum.Tuple {
  get trader(): Address {
    return this[0].toAddress();
  }

  get pairIndex(): BigInt {
    return this[1].toBigInt();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get initialPosToken(): BigInt {
    return this[3].toBigInt();
  }

  get positionSizeDai(): BigInt {
    return this[4].toBigInt();
  }

  get openPrice(): BigInt {
    return this[5].toBigInt();
  }

  get buy(): boolean {
    return this[6].toBoolean();
  }

  get leverage(): BigInt {
    return this[7].toBigInt();
  }

  get tp(): BigInt {
    return this[8].toBigInt();
  }

  get sl(): BigInt {
    return this[9].toBigInt();
  }
}

export class MarketOpenCanceled extends ethereum.Event {
  get params(): MarketOpenCanceled__Params {
    return new MarketOpenCanceled__Params(this);
  }
}

export class MarketOpenCanceled__Params {
  _event: MarketOpenCanceled;

  constructor(event: MarketOpenCanceled) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get trader(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pairIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get cancelReason(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class NftOrderCanceled extends ethereum.Event {
  get params(): NftOrderCanceled__Params {
    return new NftOrderCanceled__Params(this);
  }
}

export class NftOrderCanceled__Params {
  _event: NftOrderCanceled;

  constructor(event: NftOrderCanceled) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftHolder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get orderType(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get cancelReason(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class PairMaxLeverageUpdated extends ethereum.Event {
  get params(): PairMaxLeverageUpdated__Params {
    return new PairMaxLeverageUpdated__Params(this);
  }
}

export class PairMaxLeverageUpdated__Params {
  _event: PairMaxLeverageUpdated;

  constructor(event: PairMaxLeverageUpdated) {
    this._event = event;
  }

  get pairIndex(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maxLeverage(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Pause extends ethereum.Event {
  get params(): Pause__Params {
    return new Pause__Params(this);
  }
}

export class Pause__Params {
  _event: Pause;

  constructor(event: Pause) {
    this._event = event;
  }

  get paused(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class ReferralFeeCharged extends ethereum.Event {
  get params(): ReferralFeeCharged__Params {
    return new ReferralFeeCharged__Params(this);
  }
}

export class ReferralFeeCharged__Params {
  _event: ReferralFeeCharged;

  constructor(event: ReferralFeeCharged) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get valueDai(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SssFeeCharged extends ethereum.Event {
  get params(): SssFeeCharged__Params {
    return new SssFeeCharged__Params(this);
  }
}

export class SssFeeCharged__Params {
  _event: SssFeeCharged;

  constructor(event: SssFeeCharged) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get valueDai(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TriggerFeeCharged extends ethereum.Event {
  get params(): TriggerFeeCharged__Params {
    return new TriggerFeeCharged__Params(this);
  }
}

export class TriggerFeeCharged__Params {
  _event: TriggerFeeCharged;

  constructor(event: TriggerFeeCharged) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get valueDai(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GNSTradingCallbacksV6_4_1__tradeDataResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getMaxSlippageP(): BigInt {
    return this.value0;
  }

  get_placeholder(): BigInt {
    return this.value1;
  }
}

export class GNSTradingCallbacksV6_4_1__tradeLastUpdatedResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getTp(): BigInt {
    return this.value0;
  }

  getSl(): BigInt {
    return this.value1;
  }

  getLimit(): BigInt {
    return this.value2;
  }

  getCreated(): BigInt {
    return this.value3;
  }
}

export class GNSTradingCallbacksV6_4_1 extends ethereum.SmartContract {
  static bind(address: Address): GNSTradingCallbacksV6_4_1 {
    return new GNSTradingCallbacksV6_4_1("GNSTradingCallbacksV6_4_1", address);
  }

  borrowingFees(): Address {
    let result = super.call("borrowingFees", "borrowingFees():(address)", []);

    return result[0].toAddress();
  }

  try_borrowingFees(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "borrowingFees",
      "borrowingFees():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canExecuteTimeout(): BigInt {
    let result = super.call(
      "canExecuteTimeout",
      "canExecuteTimeout():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_canExecuteTimeout(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "canExecuteTimeout",
      "canExecuteTimeout():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  daiVaultFeeP(): BigInt {
    let result = super.call("daiVaultFeeP", "daiVaultFeeP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_daiVaultFeeP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("daiVaultFeeP", "daiVaultFeeP():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllPairsMaxLeverage(): Array<BigInt> {
    let result = super.call(
      "getAllPairsMaxLeverage",
      "getAllPairsMaxLeverage():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getAllPairsMaxLeverage(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAllPairsMaxLeverage",
      "getAllPairsMaxLeverage():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  govFeesDai(): BigInt {
    let result = super.call("govFeesDai", "govFeesDai():(uint256)", []);

    return result[0].toBigInt();
  }

  try_govFeesDai(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("govFeesDai", "govFeesDai():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isDone(): boolean {
    let result = super.call("isDone", "isDone():(bool)", []);

    return result[0].toBoolean();
  }

  try_isDone(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isDone", "isDone():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lpFeeP(): BigInt {
    let result = super.call("lpFeeP", "lpFeeP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lpFeeP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lpFeeP", "lpFeeP():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftRewards(): Address {
    let result = super.call("nftRewards", "nftRewards():(address)", []);

    return result[0].toAddress();
  }

  try_nftRewards(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftRewards", "nftRewards():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pairInfos(): Address {
    let result = super.call("pairInfos", "pairInfos():(address)", []);

    return result[0].toAddress();
  }

  try_pairInfos(): ethereum.CallResult<Address> {
    let result = super.tryCall("pairInfos", "pairInfos():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pairMaxLeverage(param0: BigInt): BigInt {
    let result = super.call(
      "pairMaxLeverage",
      "pairMaxLeverage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_pairMaxLeverage(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pairMaxLeverage",
      "pairMaxLeverage(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referrals(): Address {
    let result = super.call("referrals", "referrals():(address)", []);

    return result[0].toAddress();
  }

  try_referrals(): ethereum.CallResult<Address> {
    let result = super.tryCall("referrals", "referrals():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sssFeeP(): BigInt {
    let result = super.call("sssFeeP", "sssFeeP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sssFeeP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sssFeeP", "sssFeeP():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  staking(): Address {
    let result = super.call("staking", "staking():(address)", []);

    return result[0].toAddress();
  }

  try_staking(): ethereum.CallResult<Address> {
    let result = super.tryCall("staking", "staking():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  storageT(): Address {
    let result = super.call("storageT", "storageT():(address)", []);

    return result[0].toAddress();
  }

  try_storageT(): ethereum.CallResult<Address> {
    let result = super.tryCall("storageT", "storageT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tradeData(
    param0: Address,
    param1: BigInt,
    param2: BigInt,
    param3: i32
  ): GNSTradingCallbacksV6_4_1__tradeDataResult {
    let result = super.call(
      "tradeData",
      "tradeData(address,uint256,uint256,uint8):(uint40,uint216)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param3))
      ]
    );

    return new GNSTradingCallbacksV6_4_1__tradeDataResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_tradeData(
    param0: Address,
    param1: BigInt,
    param2: BigInt,
    param3: i32
  ): ethereum.CallResult<GNSTradingCallbacksV6_4_1__tradeDataResult> {
    let result = super.tryCall(
      "tradeData",
      "tradeData(address,uint256,uint256,uint8):(uint40,uint216)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param3))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GNSTradingCallbacksV6_4_1__tradeDataResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  tradeLastUpdated(
    param0: Address,
    param1: BigInt,
    param2: BigInt,
    param3: i32
  ): GNSTradingCallbacksV6_4_1__tradeLastUpdatedResult {
    let result = super.call(
      "tradeLastUpdated",
      "tradeLastUpdated(address,uint256,uint256,uint8):(uint32,uint32,uint32,uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param3))
      ]
    );

    return new GNSTradingCallbacksV6_4_1__tradeLastUpdatedResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_tradeLastUpdated(
    param0: Address,
    param1: BigInt,
    param2: BigInt,
    param3: i32
  ): ethereum.CallResult<GNSTradingCallbacksV6_4_1__tradeLastUpdatedResult> {
    let result = super.tryCall(
      "tradeLastUpdated",
      "tradeLastUpdated(address,uint256,uint256,uint8):(uint32,uint32,uint32,uint32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param3))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GNSTradingCallbacksV6_4_1__tradeLastUpdatedResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }
}

export class ClaimGovFeesCall extends ethereum.Call {
  get inputs(): ClaimGovFeesCall__Inputs {
    return new ClaimGovFeesCall__Inputs(this);
  }

  get outputs(): ClaimGovFeesCall__Outputs {
    return new ClaimGovFeesCall__Outputs(this);
  }
}

export class ClaimGovFeesCall__Inputs {
  _call: ClaimGovFeesCall;

  constructor(call: ClaimGovFeesCall) {
    this._call = call;
  }
}

export class ClaimGovFeesCall__Outputs {
  _call: ClaimGovFeesCall;

  constructor(call: ClaimGovFeesCall) {
    this._call = call;
  }
}

export class CloseTradeMarketCallbackCall extends ethereum.Call {
  get inputs(): CloseTradeMarketCallbackCall__Inputs {
    return new CloseTradeMarketCallbackCall__Inputs(this);
  }

  get outputs(): CloseTradeMarketCallbackCall__Outputs {
    return new CloseTradeMarketCallbackCall__Outputs(this);
  }
}

export class CloseTradeMarketCallbackCall__Inputs {
  _call: CloseTradeMarketCallbackCall;

  constructor(call: CloseTradeMarketCallbackCall) {
    this._call = call;
  }

  get a(): CloseTradeMarketCallbackCallAStruct {
    return changetype<CloseTradeMarketCallbackCallAStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CloseTradeMarketCallbackCall__Outputs {
  _call: CloseTradeMarketCallbackCall;

  constructor(call: CloseTradeMarketCallbackCall) {
    this._call = call;
  }
}

export class CloseTradeMarketCallbackCallAStruct extends ethereum.Tuple {
  get orderId(): BigInt {
    return this[0].toBigInt();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }

  get spreadP(): BigInt {
    return this[2].toBigInt();
  }

  get open(): BigInt {
    return this[3].toBigInt();
  }

  get high(): BigInt {
    return this[4].toBigInt();
  }

  get low(): BigInt {
    return this[5].toBigInt();
  }
}

export class DoneCall extends ethereum.Call {
  get inputs(): DoneCall__Inputs {
    return new DoneCall__Inputs(this);
  }

  get outputs(): DoneCall__Outputs {
    return new DoneCall__Outputs(this);
  }
}

export class DoneCall__Inputs {
  _call: DoneCall;

  constructor(call: DoneCall) {
    this._call = call;
  }
}

export class DoneCall__Outputs {
  _call: DoneCall;

  constructor(call: DoneCall) {
    this._call = call;
  }
}

export class ExecuteNftCloseOrderCallbackCall extends ethereum.Call {
  get inputs(): ExecuteNftCloseOrderCallbackCall__Inputs {
    return new ExecuteNftCloseOrderCallbackCall__Inputs(this);
  }

  get outputs(): ExecuteNftCloseOrderCallbackCall__Outputs {
    return new ExecuteNftCloseOrderCallbackCall__Outputs(this);
  }
}

export class ExecuteNftCloseOrderCallbackCall__Inputs {
  _call: ExecuteNftCloseOrderCallbackCall;

  constructor(call: ExecuteNftCloseOrderCallbackCall) {
    this._call = call;
  }

  get a(): ExecuteNftCloseOrderCallbackCallAStruct {
    return changetype<ExecuteNftCloseOrderCallbackCallAStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class ExecuteNftCloseOrderCallbackCall__Outputs {
  _call: ExecuteNftCloseOrderCallbackCall;

  constructor(call: ExecuteNftCloseOrderCallbackCall) {
    this._call = call;
  }
}

export class ExecuteNftCloseOrderCallbackCallAStruct extends ethereum.Tuple {
  get orderId(): BigInt {
    return this[0].toBigInt();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }

  get spreadP(): BigInt {
    return this[2].toBigInt();
  }

  get open(): BigInt {
    return this[3].toBigInt();
  }

  get high(): BigInt {
    return this[4].toBigInt();
  }

  get low(): BigInt {
    return this[5].toBigInt();
  }
}

export class ExecuteNftOpenOrderCallbackCall extends ethereum.Call {
  get inputs(): ExecuteNftOpenOrderCallbackCall__Inputs {
    return new ExecuteNftOpenOrderCallbackCall__Inputs(this);
  }

  get outputs(): ExecuteNftOpenOrderCallbackCall__Outputs {
    return new ExecuteNftOpenOrderCallbackCall__Outputs(this);
  }
}

export class ExecuteNftOpenOrderCallbackCall__Inputs {
  _call: ExecuteNftOpenOrderCallbackCall;

  constructor(call: ExecuteNftOpenOrderCallbackCall) {
    this._call = call;
  }

  get a(): ExecuteNftOpenOrderCallbackCallAStruct {
    return changetype<ExecuteNftOpenOrderCallbackCallAStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class ExecuteNftOpenOrderCallbackCall__Outputs {
  _call: ExecuteNftOpenOrderCallbackCall;

  constructor(call: ExecuteNftOpenOrderCallbackCall) {
    this._call = call;
  }
}

export class ExecuteNftOpenOrderCallbackCallAStruct extends ethereum.Tuple {
  get orderId(): BigInt {
    return this[0].toBigInt();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }

  get spreadP(): BigInt {
    return this[2].toBigInt();
  }

  get open(): BigInt {
    return this[3].toBigInt();
  }

  get high(): BigInt {
    return this[4].toBigInt();
  }

  get low(): BigInt {
    return this[5].toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _storageT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nftRewards(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _pairInfos(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _referrals(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _staking(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get vaultToApprove(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _daiVaultFeeP(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _lpFeeP(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _sssFeeP(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _canExecuteTimeout(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeV2Call extends ethereum.Call {
  get inputs(): InitializeV2Call__Inputs {
    return new InitializeV2Call__Inputs(this);
  }

  get outputs(): InitializeV2Call__Outputs {
    return new InitializeV2Call__Outputs(this);
  }
}

export class InitializeV2Call__Inputs {
  _call: InitializeV2Call;

  constructor(call: InitializeV2Call) {
    this._call = call;
  }

  get _borrowingFees(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeV2Call__Outputs {
  _call: InitializeV2Call;

  constructor(call: InitializeV2Call) {
    this._call = call;
  }
}

export class InitializeV4Call extends ethereum.Call {
  get inputs(): InitializeV4Call__Inputs {
    return new InitializeV4Call__Inputs(this);
  }

  get outputs(): InitializeV4Call__Outputs {
    return new InitializeV4Call__Outputs(this);
  }
}

export class InitializeV4Call__Inputs {
  _call: InitializeV4Call;

  constructor(call: InitializeV4Call) {
    this._call = call;
  }

  get _staking(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _oracleRewards(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeV4Call__Outputs {
  _call: InitializeV4Call;

  constructor(call: InitializeV4Call) {
    this._call = call;
  }
}

export class OpenTradeMarketCallbackCall extends ethereum.Call {
  get inputs(): OpenTradeMarketCallbackCall__Inputs {
    return new OpenTradeMarketCallbackCall__Inputs(this);
  }

  get outputs(): OpenTradeMarketCallbackCall__Outputs {
    return new OpenTradeMarketCallbackCall__Outputs(this);
  }
}

export class OpenTradeMarketCallbackCall__Inputs {
  _call: OpenTradeMarketCallbackCall;

  constructor(call: OpenTradeMarketCallbackCall) {
    this._call = call;
  }

  get a(): OpenTradeMarketCallbackCallAStruct {
    return changetype<OpenTradeMarketCallbackCallAStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class OpenTradeMarketCallbackCall__Outputs {
  _call: OpenTradeMarketCallbackCall;

  constructor(call: OpenTradeMarketCallbackCall) {
    this._call = call;
  }
}

export class OpenTradeMarketCallbackCallAStruct extends ethereum.Tuple {
  get orderId(): BigInt {
    return this[0].toBigInt();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }

  get spreadP(): BigInt {
    return this[2].toBigInt();
  }

  get open(): BigInt {
    return this[3].toBigInt();
  }

  get high(): BigInt {
    return this[4].toBigInt();
  }

  get low(): BigInt {
    return this[5].toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class SetClosingFeeSharesPCall extends ethereum.Call {
  get inputs(): SetClosingFeeSharesPCall__Inputs {
    return new SetClosingFeeSharesPCall__Inputs(this);
  }

  get outputs(): SetClosingFeeSharesPCall__Outputs {
    return new SetClosingFeeSharesPCall__Outputs(this);
  }
}

export class SetClosingFeeSharesPCall__Inputs {
  _call: SetClosingFeeSharesPCall;

  constructor(call: SetClosingFeeSharesPCall) {
    this._call = call;
  }

  get _daiVaultFeeP(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lpFeeP(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _sssFeeP(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetClosingFeeSharesPCall__Outputs {
  _call: SetClosingFeeSharesPCall;

  constructor(call: SetClosingFeeSharesPCall) {
    this._call = call;
  }
}

export class SetPairMaxLeverageCall extends ethereum.Call {
  get inputs(): SetPairMaxLeverageCall__Inputs {
    return new SetPairMaxLeverageCall__Inputs(this);
  }

  get outputs(): SetPairMaxLeverageCall__Outputs {
    return new SetPairMaxLeverageCall__Outputs(this);
  }
}

export class SetPairMaxLeverageCall__Inputs {
  _call: SetPairMaxLeverageCall;

  constructor(call: SetPairMaxLeverageCall) {
    this._call = call;
  }

  get pairIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxLeverage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPairMaxLeverageCall__Outputs {
  _call: SetPairMaxLeverageCall;

  constructor(call: SetPairMaxLeverageCall) {
    this._call = call;
  }
}

export class SetPairMaxLeverageArrayCall extends ethereum.Call {
  get inputs(): SetPairMaxLeverageArrayCall__Inputs {
    return new SetPairMaxLeverageArrayCall__Inputs(this);
  }

  get outputs(): SetPairMaxLeverageArrayCall__Outputs {
    return new SetPairMaxLeverageArrayCall__Outputs(this);
  }
}

export class SetPairMaxLeverageArrayCall__Inputs {
  _call: SetPairMaxLeverageArrayCall;

  constructor(call: SetPairMaxLeverageArrayCall) {
    this._call = call;
  }

  get indices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetPairMaxLeverageArrayCall__Outputs {
  _call: SetPairMaxLeverageArrayCall;

  constructor(call: SetPairMaxLeverageArrayCall) {
    this._call = call;
  }
}

export class SetTradeDataCall extends ethereum.Call {
  get inputs(): SetTradeDataCall__Inputs {
    return new SetTradeDataCall__Inputs(this);
  }

  get outputs(): SetTradeDataCall__Outputs {
    return new SetTradeDataCall__Outputs(this);
  }
}

export class SetTradeDataCall__Inputs {
  _call: SetTradeDataCall;

  constructor(call: SetTradeDataCall) {
    this._call = call;
  }

  get _id(): SetTradeDataCall_idStruct {
    return changetype<SetTradeDataCall_idStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _tradeData(): SetTradeDataCall_tradeDataStruct {
    return changetype<SetTradeDataCall_tradeDataStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class SetTradeDataCall__Outputs {
  _call: SetTradeDataCall;

  constructor(call: SetTradeDataCall) {
    this._call = call;
  }
}

export class SetTradeDataCall_idStruct extends ethereum.Tuple {
  get trader(): Address {
    return this[0].toAddress();
  }

  get pairIndex(): BigInt {
    return this[1].toBigInt();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get tradeType(): i32 {
    return this[3].toI32();
  }
}

export class SetTradeDataCall_tradeDataStruct extends ethereum.Tuple {
  get maxSlippageP(): BigInt {
    return this[0].toBigInt();
  }

  get _placeholder(): BigInt {
    return this[1].toBigInt();
  }
}

export class SetTradeLastUpdatedCall extends ethereum.Call {
  get inputs(): SetTradeLastUpdatedCall__Inputs {
    return new SetTradeLastUpdatedCall__Inputs(this);
  }

  get outputs(): SetTradeLastUpdatedCall__Outputs {
    return new SetTradeLastUpdatedCall__Outputs(this);
  }
}

export class SetTradeLastUpdatedCall__Inputs {
  _call: SetTradeLastUpdatedCall;

  constructor(call: SetTradeLastUpdatedCall) {
    this._call = call;
  }

  get _id(): SetTradeLastUpdatedCall_idStruct {
    return changetype<SetTradeLastUpdatedCall_idStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _lastUpdated(): SetTradeLastUpdatedCall_lastUpdatedStruct {
    return changetype<SetTradeLastUpdatedCall_lastUpdatedStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class SetTradeLastUpdatedCall__Outputs {
  _call: SetTradeLastUpdatedCall;

  constructor(call: SetTradeLastUpdatedCall) {
    this._call = call;
  }
}

export class SetTradeLastUpdatedCall_idStruct extends ethereum.Tuple {
  get trader(): Address {
    return this[0].toAddress();
  }

  get pairIndex(): BigInt {
    return this[1].toBigInt();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get tradeType(): i32 {
    return this[3].toI32();
  }
}

export class SetTradeLastUpdatedCall_lastUpdatedStruct extends ethereum.Tuple {
  get tp(): BigInt {
    return this[0].toBigInt();
  }

  get sl(): BigInt {
    return this[1].toBigInt();
  }

  get limit(): BigInt {
    return this[2].toBigInt();
  }

  get created(): BigInt {
    return this[3].toBigInt();
  }
}
