// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AllyRewardDistributed extends ethereum.Event {
  get params(): AllyRewardDistributed__Params {
    return new AllyRewardDistributed__Params(this);
  }
}

export class AllyRewardDistributed__Params {
  _event: AllyRewardDistributed;

  constructor(event: AllyRewardDistributed) {
    this._event = event;
  }

  get ally(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get trader(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get volumeDai(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountToken(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountValueDai(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class AllyRewardsClaimed extends ethereum.Event {
  get params(): AllyRewardsClaimed__Params {
    return new AllyRewardsClaimed__Params(this);
  }
}

export class AllyRewardsClaimed__Params {
  _event: AllyRewardsClaimed;

  constructor(event: AllyRewardsClaimed) {
    this._event = event;
  }

  get ally(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AllyUnwhitelisted extends ethereum.Event {
  get params(): AllyUnwhitelisted__Params {
    return new AllyUnwhitelisted__Params(this);
  }
}

export class AllyUnwhitelisted__Params {
  _event: AllyUnwhitelisted;

  constructor(event: AllyUnwhitelisted) {
    this._event = event;
  }

  get ally(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AllyWhitelisted extends ethereum.Event {
  get params(): AllyWhitelisted__Params {
    return new AllyWhitelisted__Params(this);
  }
}

export class AllyWhitelisted__Params {
  _event: AllyWhitelisted;

  constructor(event: AllyWhitelisted) {
    this._event = event;
  }

  get ally(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class ReferrerRegistered extends ethereum.Event {
  get params(): ReferrerRegistered__Params {
    return new ReferrerRegistered__Params(this);
  }
}

export class ReferrerRegistered__Params {
  _event: ReferrerRegistered;

  constructor(event: ReferrerRegistered) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get referrer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ReferrerRewardDistributed extends ethereum.Event {
  get params(): ReferrerRewardDistributed__Params {
    return new ReferrerRewardDistributed__Params(this);
  }
}

export class ReferrerRewardDistributed__Params {
  _event: ReferrerRewardDistributed;

  constructor(event: ReferrerRewardDistributed) {
    this._event = event;
  }

  get referrer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get trader(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get volumeDai(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountToken(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountValueDai(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ReferrerRewardsClaimed extends ethereum.Event {
  get params(): ReferrerRewardsClaimed__Params {
    return new ReferrerRewardsClaimed__Params(this);
  }
}

export class ReferrerRewardsClaimed__Params {
  _event: ReferrerRewardsClaimed;

  constructor(event: ReferrerRewardsClaimed) {
    this._event = event;
  }

  get referrer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountToken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReferrerUnwhitelisted extends ethereum.Event {
  get params(): ReferrerUnwhitelisted__Params {
    return new ReferrerUnwhitelisted__Params(this);
  }
}

export class ReferrerUnwhitelisted__Params {
  _event: ReferrerUnwhitelisted;

  constructor(event: ReferrerUnwhitelisted) {
    this._event = event;
  }

  get referrer(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ReferrerWhitelisted extends ethereum.Event {
  get params(): ReferrerWhitelisted__Params {
    return new ReferrerWhitelisted__Params(this);
  }
}

export class ReferrerWhitelisted__Params {
  _event: ReferrerWhitelisted;

  constructor(event: ReferrerWhitelisted) {
    this._event = event;
  }

  get referrer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ally(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdatedAllyFeeP extends ethereum.Event {
  get params(): UpdatedAllyFeeP__Params {
    return new UpdatedAllyFeeP__Params(this);
  }
}

export class UpdatedAllyFeeP__Params {
  _event: UpdatedAllyFeeP;

  constructor(event: UpdatedAllyFeeP) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedOpenFeeP extends ethereum.Event {
  get params(): UpdatedOpenFeeP__Params {
    return new UpdatedOpenFeeP__Params(this);
  }
}

export class UpdatedOpenFeeP__Params {
  _event: UpdatedOpenFeeP;

  constructor(event: UpdatedOpenFeeP) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedStartReferrerFeeP extends ethereum.Event {
  get params(): UpdatedStartReferrerFeeP__Params {
    return new UpdatedStartReferrerFeeP__Params(this);
  }
}

export class UpdatedStartReferrerFeeP__Params {
  _event: UpdatedStartReferrerFeeP;

  constructor(event: UpdatedStartReferrerFeeP) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdatedTargetVolumeDai extends ethereum.Event {
  get params(): UpdatedTargetVolumeDai__Params {
    return new UpdatedTargetVolumeDai__Params(this);
  }
}

export class UpdatedTargetVolumeDai__Params {
  _event: UpdatedTargetVolumeDai;

  constructor(event: UpdatedTargetVolumeDai) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class GNSReferrals__allyDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getVolumeReferredDai(): BigInt {
    return this.value0;
  }

  getPendingRewardsToken(): BigInt {
    return this.value1;
  }

  getTotalRewardsToken(): BigInt {
    return this.value2;
  }

  getTotalRewardsValueDai(): BigInt {
    return this.value3;
  }

  getActive(): boolean {
    return this.value4;
  }
}

export class GNSReferrals__referrerDetailsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getAlly(): Address {
    return this.value0;
  }

  getVolumeReferredDai(): BigInt {
    return this.value1;
  }

  getPendingRewardsToken(): BigInt {
    return this.value2;
  }

  getTotalRewardsToken(): BigInt {
    return this.value3;
  }

  getTotalRewardsValueDai(): BigInt {
    return this.value4;
  }

  getActive(): boolean {
    return this.value5;
  }
}

export class GNSReferrals extends ethereum.SmartContract {
  static bind(address: Address): GNSReferrals {
    return new GNSReferrals("GNSReferrals", address);
  }

  allyDetails(param0: Address): GNSReferrals__allyDetailsResult {
    let result = super.call(
      "allyDetails",
      "allyDetails(address):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new GNSReferrals__allyDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_allyDetails(
    param0: Address
  ): ethereum.CallResult<GNSReferrals__allyDetailsResult> {
    let result = super.tryCall(
      "allyDetails",
      "allyDetails(address):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GNSReferrals__allyDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  allyFeeP(): BigInt {
    let result = super.call("allyFeeP", "allyFeeP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_allyFeeP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("allyFeeP", "allyFeeP():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributePotentialReward(
    trader: Address,
    volumeDai: BigInt,
    pairOpenFeeP: BigInt,
    tokenPriceDai: BigInt
  ): BigInt {
    let result = super.call(
      "distributePotentialReward",
      "distributePotentialReward(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromUnsignedBigInt(volumeDai),
        ethereum.Value.fromUnsignedBigInt(pairOpenFeeP),
        ethereum.Value.fromUnsignedBigInt(tokenPriceDai)
      ]
    );

    return result[0].toBigInt();
  }

  try_distributePotentialReward(
    trader: Address,
    volumeDai: BigInt,
    pairOpenFeeP: BigInt,
    tokenPriceDai: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributePotentialReward",
      "distributePotentialReward(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromUnsignedBigInt(volumeDai),
        ethereum.Value.fromUnsignedBigInt(pairOpenFeeP),
        ethereum.Value.fromUnsignedBigInt(tokenPriceDai)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPercentOfOpenFeeP(trader: Address): BigInt {
    let result = super.call(
      "getPercentOfOpenFeeP",
      "getPercentOfOpenFeeP(address):(uint256)",
      [ethereum.Value.fromAddress(trader)]
    );

    return result[0].toBigInt();
  }

  try_getPercentOfOpenFeeP(trader: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPercentOfOpenFeeP",
      "getPercentOfOpenFeeP(address):(uint256)",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPercentOfOpenFeeP_calc(volumeReferredDai: BigInt): BigInt {
    let result = super.call(
      "getPercentOfOpenFeeP_calc",
      "getPercentOfOpenFeeP_calc(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(volumeReferredDai)]
    );

    return result[0].toBigInt();
  }

  try_getPercentOfOpenFeeP_calc(
    volumeReferredDai: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPercentOfOpenFeeP_calc",
      "getPercentOfOpenFeeP_calc(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(volumeReferredDai)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReferrerFeeP(pairOpenFeeP: BigInt, volumeReferredDai: BigInt): BigInt {
    let result = super.call(
      "getReferrerFeeP",
      "getReferrerFeeP(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(pairOpenFeeP),
        ethereum.Value.fromUnsignedBigInt(volumeReferredDai)
      ]
    );

    return result[0].toBigInt();
  }

  try_getReferrerFeeP(
    pairOpenFeeP: BigInt,
    volumeReferredDai: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReferrerFeeP",
      "getReferrerFeeP(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(pairOpenFeeP),
        ethereum.Value.fromUnsignedBigInt(volumeReferredDai)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReferrersReferred(ally: Address): Array<Address> {
    let result = super.call(
      "getReferrersReferred",
      "getReferrersReferred(address):(address[])",
      [ethereum.Value.fromAddress(ally)]
    );

    return result[0].toAddressArray();
  }

  try_getReferrersReferred(ally: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getReferrersReferred",
      "getReferrersReferred(address):(address[])",
      [ethereum.Value.fromAddress(ally)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTraderReferrer(trader: Address): Address {
    let result = super.call(
      "getTraderReferrer",
      "getTraderReferrer(address):(address)",
      [ethereum.Value.fromAddress(trader)]
    );

    return result[0].toAddress();
  }

  try_getTraderReferrer(trader: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTraderReferrer",
      "getTraderReferrer(address):(address)",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTradersReferred(referred: Address): Array<Address> {
    let result = super.call(
      "getTradersReferred",
      "getTradersReferred(address):(address[])",
      [ethereum.Value.fromAddress(referred)]
    );

    return result[0].toAddressArray();
  }

  try_getTradersReferred(
    referred: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getTradersReferred",
      "getTradersReferred(address):(address[])",
      [ethereum.Value.fromAddress(referred)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  openFeeP(): BigInt {
    let result = super.call("openFeeP", "openFeeP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_openFeeP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("openFeeP", "openFeeP():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  referrerByTrader(param0: Address): Address {
    let result = super.call(
      "referrerByTrader",
      "referrerByTrader(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_referrerByTrader(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "referrerByTrader",
      "referrerByTrader(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  referrerDetails(param0: Address): GNSReferrals__referrerDetailsResult {
    let result = super.call(
      "referrerDetails",
      "referrerDetails(address):(address,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new GNSReferrals__referrerDetailsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_referrerDetails(
    param0: Address
  ): ethereum.CallResult<GNSReferrals__referrerDetailsResult> {
    let result = super.tryCall(
      "referrerDetails",
      "referrerDetails(address):(address,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GNSReferrals__referrerDetailsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  startReferrerFeeP(): BigInt {
    let result = super.call(
      "startReferrerFeeP",
      "startReferrerFeeP():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_startReferrerFeeP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "startReferrerFeeP",
      "startReferrerFeeP():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  storageT(): Address {
    let result = super.call("storageT", "storageT():(address)", []);

    return result[0].toAddress();
  }

  try_storageT(): ethereum.CallResult<Address> {
    let result = super.tryCall("storageT", "storageT():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  targetVolumeDai(): BigInt {
    let result = super.call(
      "targetVolumeDai",
      "targetVolumeDai():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_targetVolumeDai(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "targetVolumeDai",
      "targetVolumeDai():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ClaimAllyRewardsCall extends ethereum.Call {
  get inputs(): ClaimAllyRewardsCall__Inputs {
    return new ClaimAllyRewardsCall__Inputs(this);
  }

  get outputs(): ClaimAllyRewardsCall__Outputs {
    return new ClaimAllyRewardsCall__Outputs(this);
  }
}

export class ClaimAllyRewardsCall__Inputs {
  _call: ClaimAllyRewardsCall;

  constructor(call: ClaimAllyRewardsCall) {
    this._call = call;
  }
}

export class ClaimAllyRewardsCall__Outputs {
  _call: ClaimAllyRewardsCall;

  constructor(call: ClaimAllyRewardsCall) {
    this._call = call;
  }
}

export class ClaimReferrerRewardsCall extends ethereum.Call {
  get inputs(): ClaimReferrerRewardsCall__Inputs {
    return new ClaimReferrerRewardsCall__Inputs(this);
  }

  get outputs(): ClaimReferrerRewardsCall__Outputs {
    return new ClaimReferrerRewardsCall__Outputs(this);
  }
}

export class ClaimReferrerRewardsCall__Inputs {
  _call: ClaimReferrerRewardsCall;

  constructor(call: ClaimReferrerRewardsCall) {
    this._call = call;
  }
}

export class ClaimReferrerRewardsCall__Outputs {
  _call: ClaimReferrerRewardsCall;

  constructor(call: ClaimReferrerRewardsCall) {
    this._call = call;
  }
}

export class DistributePotentialRewardCall extends ethereum.Call {
  get inputs(): DistributePotentialRewardCall__Inputs {
    return new DistributePotentialRewardCall__Inputs(this);
  }

  get outputs(): DistributePotentialRewardCall__Outputs {
    return new DistributePotentialRewardCall__Outputs(this);
  }
}

export class DistributePotentialRewardCall__Inputs {
  _call: DistributePotentialRewardCall;

  constructor(call: DistributePotentialRewardCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get volumeDai(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pairOpenFeeP(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokenPriceDai(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DistributePotentialRewardCall__Outputs {
  _call: DistributePotentialRewardCall;

  constructor(call: DistributePotentialRewardCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _storageT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _allyFeeP(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _startReferrerFeeP(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _openFeeP(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _targetVolumeDai(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RegisterPotentialReferrerCall extends ethereum.Call {
  get inputs(): RegisterPotentialReferrerCall__Inputs {
    return new RegisterPotentialReferrerCall__Inputs(this);
  }

  get outputs(): RegisterPotentialReferrerCall__Outputs {
    return new RegisterPotentialReferrerCall__Outputs(this);
  }
}

export class RegisterPotentialReferrerCall__Inputs {
  _call: RegisterPotentialReferrerCall;

  constructor(call: RegisterPotentialReferrerCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get referrer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterPotentialReferrerCall__Outputs {
  _call: RegisterPotentialReferrerCall;

  constructor(call: RegisterPotentialReferrerCall) {
    this._call = call;
  }
}

export class UnwhitelistAllyCall extends ethereum.Call {
  get inputs(): UnwhitelistAllyCall__Inputs {
    return new UnwhitelistAllyCall__Inputs(this);
  }

  get outputs(): UnwhitelistAllyCall__Outputs {
    return new UnwhitelistAllyCall__Outputs(this);
  }
}

export class UnwhitelistAllyCall__Inputs {
  _call: UnwhitelistAllyCall;

  constructor(call: UnwhitelistAllyCall) {
    this._call = call;
  }

  get ally(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnwhitelistAllyCall__Outputs {
  _call: UnwhitelistAllyCall;

  constructor(call: UnwhitelistAllyCall) {
    this._call = call;
  }
}

export class UnwhitelistReferrerCall extends ethereum.Call {
  get inputs(): UnwhitelistReferrerCall__Inputs {
    return new UnwhitelistReferrerCall__Inputs(this);
  }

  get outputs(): UnwhitelistReferrerCall__Outputs {
    return new UnwhitelistReferrerCall__Outputs(this);
  }
}

export class UnwhitelistReferrerCall__Inputs {
  _call: UnwhitelistReferrerCall;

  constructor(call: UnwhitelistReferrerCall) {
    this._call = call;
  }

  get referrer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnwhitelistReferrerCall__Outputs {
  _call: UnwhitelistReferrerCall;

  constructor(call: UnwhitelistReferrerCall) {
    this._call = call;
  }
}

export class UpdateAllyFeePCall extends ethereum.Call {
  get inputs(): UpdateAllyFeePCall__Inputs {
    return new UpdateAllyFeePCall__Inputs(this);
  }

  get outputs(): UpdateAllyFeePCall__Outputs {
    return new UpdateAllyFeePCall__Outputs(this);
  }
}

export class UpdateAllyFeePCall__Inputs {
  _call: UpdateAllyFeePCall;

  constructor(call: UpdateAllyFeePCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateAllyFeePCall__Outputs {
  _call: UpdateAllyFeePCall;

  constructor(call: UpdateAllyFeePCall) {
    this._call = call;
  }
}

export class UpdateOpenFeePCall extends ethereum.Call {
  get inputs(): UpdateOpenFeePCall__Inputs {
    return new UpdateOpenFeePCall__Inputs(this);
  }

  get outputs(): UpdateOpenFeePCall__Outputs {
    return new UpdateOpenFeePCall__Outputs(this);
  }
}

export class UpdateOpenFeePCall__Inputs {
  _call: UpdateOpenFeePCall;

  constructor(call: UpdateOpenFeePCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateOpenFeePCall__Outputs {
  _call: UpdateOpenFeePCall;

  constructor(call: UpdateOpenFeePCall) {
    this._call = call;
  }
}

export class UpdateStartReferrerFeePCall extends ethereum.Call {
  get inputs(): UpdateStartReferrerFeePCall__Inputs {
    return new UpdateStartReferrerFeePCall__Inputs(this);
  }

  get outputs(): UpdateStartReferrerFeePCall__Outputs {
    return new UpdateStartReferrerFeePCall__Outputs(this);
  }
}

export class UpdateStartReferrerFeePCall__Inputs {
  _call: UpdateStartReferrerFeePCall;

  constructor(call: UpdateStartReferrerFeePCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateStartReferrerFeePCall__Outputs {
  _call: UpdateStartReferrerFeePCall;

  constructor(call: UpdateStartReferrerFeePCall) {
    this._call = call;
  }
}

export class UpdateTargetVolumeDaiCall extends ethereum.Call {
  get inputs(): UpdateTargetVolumeDaiCall__Inputs {
    return new UpdateTargetVolumeDaiCall__Inputs(this);
  }

  get outputs(): UpdateTargetVolumeDaiCall__Outputs {
    return new UpdateTargetVolumeDaiCall__Outputs(this);
  }
}

export class UpdateTargetVolumeDaiCall__Inputs {
  _call: UpdateTargetVolumeDaiCall;

  constructor(call: UpdateTargetVolumeDaiCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateTargetVolumeDaiCall__Outputs {
  _call: UpdateTargetVolumeDaiCall;

  constructor(call: UpdateTargetVolumeDaiCall) {
    this._call = call;
  }
}

export class WhitelistAllyCall extends ethereum.Call {
  get inputs(): WhitelistAllyCall__Inputs {
    return new WhitelistAllyCall__Inputs(this);
  }

  get outputs(): WhitelistAllyCall__Outputs {
    return new WhitelistAllyCall__Outputs(this);
  }
}

export class WhitelistAllyCall__Inputs {
  _call: WhitelistAllyCall;

  constructor(call: WhitelistAllyCall) {
    this._call = call;
  }

  get ally(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WhitelistAllyCall__Outputs {
  _call: WhitelistAllyCall;

  constructor(call: WhitelistAllyCall) {
    this._call = call;
  }
}

export class WhitelistReferrerCall extends ethereum.Call {
  get inputs(): WhitelistReferrerCall__Inputs {
    return new WhitelistReferrerCall__Inputs(this);
  }

  get outputs(): WhitelistReferrerCall__Outputs {
    return new WhitelistReferrerCall__Outputs(this);
  }
}

export class WhitelistReferrerCall__Inputs {
  _call: WhitelistReferrerCall;

  constructor(call: WhitelistReferrerCall) {
    this._call = call;
  }

  get referrer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ally(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WhitelistReferrerCall__Outputs {
  _call: WhitelistReferrerCall;

  constructor(call: WhitelistReferrerCall) {
    this._call = call;
  }
}
